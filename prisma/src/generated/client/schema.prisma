generator client {
  provider        = "prisma-client-js"
    output   = "./src/generated/client"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String        @map("first_name")
  lastName     String        @map("last_name")
  username     String        @unique
  password     String
  phoneNumber  String        @unique @map("phone_number")
  isAdmin      Boolean       @default(false)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  lastLogin    DateTime?     @map("last_login")
  emailAddress String?       @map("email_address")
  invoice      invoice[]
  journal      Journal[]
  action       Action[]
  transaction  Transaction[]

  SalesJournal             SalesJournal[]
  PurchasesJournal         PurchasesJournal[]
  CashDisbursementsJournal CashDisbursementsJournal[]
  CashReceiptsJournal      CashReceiptsJournal[]
  ReturnsInwardsJournal    ReturnsInwardsJournal[]
  ReturnsOutwardsJournal   ReturnsOutwardsJournal[]
  @@map("users")
}

model Action {
  id          String  @id @default(cuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      Int     @map("user_id")
  actionType  Boolean @map("action_type")
  description String
}

enum ActionType {
  VIEW
  UPDATE
  DELETE
  ADD
}

model Transaction {
  id               Int                    @id @default(autoincrement())
  initiatedBy      Int                    @map("cashier_id")
  createdAt        DateTime               @default(now()) @map("created_at")
  totalPaid        Decimal?               @map("total_amount") @db.Decimal(12, 2)
  totalPayable     Decimal?               @map("total_payable") @db.Decimal(12, 2)
  supplierId       String?                @map("supplier_id")
  errorDescription String?                @map("error_description")
  customerId       String?                @map("customer_id")
  type             TransactionType
  status           TransactionStatusCodes
  users            User                   @relation(fields: [initiatedBy], references: [id], onDelete: Restrict)
  customer         Customer?              @relation(fields: [customerId], references: [id], onDelete: Restrict)
  supplier         Supplier?              @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  payments         Payment[]
  invoice          invoice[]
  journal          Journal[]

  SalesJournal             SalesJournal[]
  PurchasesJournal         PurchasesJournal[]
  CashDisbursementsJournal CashDisbursementsJournal[]
  CashReceiptsJournal      CashReceiptsJournal[]
  ReturnsInwardsJournal    ReturnsInwardsJournal[]
  ReturnsOutwardsJournal   ReturnsOutwardsJournal[]
  @@index([initiatedBy], map: "transactions_cashier_id_fkey")
  @@index([customerId], map: "transactions_customerId_fkey")
  @@index([supplierId], map: "transactions_supplierId_fkey")
  @@map("transactions")
}

model Payment {
  id             String        @id @default(cuid())
  paymentType    PaymentType   @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId  String        @map("payment_type_id")
  currencyId     String        @map("currency_id")
  exchangeRateId String        @map("exchange_rate_id")
  transactionId  Int           @map("transaction_id")
  paid           Decimal       @db.Decimal(12, 2)
  currency       currency      @relation("currencyTopayments", fields: [currencyId], references: [id], onDelete: Restrict)
  exchangeRates  exchangeRates @relation("exchangeRatesTopayments", fields: [exchangeRateId], references: [id], onDelete: Restrict)
  transaction    Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([currencyId], map: "payments_currency_id_fkey")
  @@index([exchangeRateId], map: "payments_exchangeRateId_fkey")
  @@index([transactionId], map: "payments_transaction_id_fkey")
  @@map("payments")
}

model PaymentType {
  id              String    @id @default(cuid())
  paymentTypeName String    @unique @map("payment_type_name")
  payment         Payment[]
  charges         Decimal   @db.Decimal(12, 2)
  tax             Tax[]
  discount        Decimal   @db.Decimal(12, 2)
}

model Tax {
  id           String         @id @default(cuid())
  taxName      String         @map("tax_name")
  taxRate      String         @map("tax_rate")
  startAmount  Decimal        @map("start_amount") @db.Decimal(12, 2)
  endAmount    Decimal        @map("end_amount") @db.Decimal(12, 2)
  active       Boolean        @default(true)
  startDate    DateTime       @map("start_date")
  endDate      DateTime       @map("end_date")
  PaymentType  PaymentType[]
  currency     currency[]
  product      Product[]
  invoice      invoice[]
  productGroup ProductGroup[]
}

model Promotions {
  id             String       @id @default(cuid())
  product        Product      @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId      String       @map("product_id")
  productGroup   ProductGroup @relation(fields: [productGroupId], references: [id], onDelete: Restrict)
  productGroupId String       @map("product_group_id")
  startDate      DateTime     @map("start_date")
  endDate        DateTime     @map("end_date")
  discountRate   Decimal      @map("discount_rate") @db.Decimal(12, 5)
}

model ProductGroup {
  id         String       @id @default(cuid())
  product    Product[]
  Tax        Tax?         @relation(fields: [taxId], references: [id])
  taxId      String?      @map("tax_id")
  Promotions Promotions[]
}

model Product {
  id                String          @id @default(cuid())
  barcode           String
  productName       String          @map("product_name")
  measurementUnit   MeasurementUnit @map("measurement_unit")
  expiryDate        DateTime        @map("expiry_date") @db.Date
  measurementAmount Int             @map("measurement_amount")
  cost              Decimal         @db.Decimal(12, 2)
  quantity          Int
  supplierId        String?         @map("supplier_id")
  tax               Tax[]
  productGroup      ProductGroup?   @relation(fields: [productGroupId], references: [id], onDelete: Cascade)
  productGroupId    String?         @map("product_group_id")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  createdAt         DateTime        @default(now()) @map("created_at")
  depleted          Boolean         @default(true)
  disposed          Boolean         @default(false)
  supplier          Supplier?       @relation(fields: [supplierId], references: [id])
  disposals         disposals[]     @relation("disposalsToproducts")
  price             Prices[]
  promotion         Promotions[]
  invoice           invoice[]

  @@index([supplierId], map: "products_supplierId_fkey")
  @@map("products")
}

model Prices {
  id             String        @id @default(cuid())
  barcode        String
  price          Decimal       @db.Decimal(12, 2)
  active         Boolean
  exchangeRateId String        @map("exchange_rate_id")
  productId      String?       @map("product_id")
  exchangeRates  exchangeRates @relation("exchangeRatesToprices", fields: [exchangeRateId], references: [id], onDelete: Restrict)
  Product        Product?      @relation(fields: [productId], references: [id], onDelete: Restrict)
  disposals      disposals[]   @relation("disposalsToprices")

  @@index([exchangeRateId], map: "prices_exchangeRateId_fkey")
  @@index([productId], map: "prices_productId_fkey")
  @@map("prices")
}

model invoice {
  id            String      @id @default(cuid())
  productId     String      @map("product_id")
  discount      Decimal     @default(0.00) @db.Decimal(12, 2)
  price         Decimal     @db.Decimal(12, 2)
  quantity      Int
  transactionId Int         @map("transaction_id")
  cashierId     Int
  tax           Tax[]
  customerId    String?     @map("customerId")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt @map("updated_at")
  cashier       User        @relation(fields: [cashierId], references: [id], onDelete: Restrict)
  customer      Customer?   @relation(fields: [customerId], references: [id], onDelete: Restrict)
  product       Product     @relation(fields: [productId], references: [id], onDelete: Restrict)
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  Supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?   @map("supplier_id")
  @@index([cashierId], map: "invoice_cashierId_fkey")
  @@index([customerId], map: "invoice_customerId_fkey")
  @@index([productId], map: "invoice_product_id_fkey")
  @@index([transactionId], map: "invoice_transaction_id_fkey")
  @@map("invoices")
}

model Supplier {
  id            String        @id @default(cuid())
  firstName     String?       @map("first_name")
  lastName      String?       @map("last_name")
  phoneNumber   String?       @unique @map("phone_number")
  corporateName String?       @unique @map("corporate_name")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  emailAddress  String?       @unique @map("email_address")
  address       Address[]     @relation("addressTosuppliers")
  product       Product[]
  invoice       invoice[]
  transactions  Transaction[]

  Journal                  Journal[]
  SalesJournal             SalesJournal[]
  CashDisbursementsJournal CashDisbursementsJournal[]
  CashReceiptsJournal      CashReceiptsJournal[]
  ReturnsOutwardsJournal   ReturnsOutwardsJournal[]
  @@map("suppliers")
}

model Customer {
  id                       String                     @id @default(cuid())
  firstName                String                     @map("first_name")
  lastName                 String                     @map("last_name")
  phoneNumber              String?                    @map("phone_number")
  emailAddress             String?                    @map("email_address")
  updatedAt                DateTime                   @updatedAt @map("updated_at")
  createdAt                DateTime                   @default(now()) @map("created_at")
  address                  Address[]                  @relation("addressTocustomers")
  invoice                  invoice[]
  transaction              Transaction[]
  Journal                  Journal[]
  PurchasesJournal         PurchasesJournal[]
  CashDisbursementsJournal CashDisbursementsJournal[]
  CashReceiptsJournal      CashReceiptsJournal[]
  ReturnsInwardsJournal    ReturnsInwardsJournal[]

  @@map("customers")
}

model Address {
  id         String    @id @default(cuid())
  supplierId String?
  customerId String?
  street     String
  city       String
  country    String
  zip        String?
  customers  Customer? @relation("addressTocustomers", fields: [customerId], references: [id], map: "Address_customerId_fkey")
  suppliers  Supplier? @relation("addressTosuppliers", fields: [supplierId], references: [id], map: "Address_supplierId_fkey")

  @@index([customerId], map: "Address_customerId_fkey")
  @@index([supplierId], map: "Address_supplierId_fkey")
}

model baseCurrency {
  id            String          @id @default(cuid())
  currencyId    String          @map("currency_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  active        Boolean         @default(true)
  currency      currency        @relation(fields: [currencyId], references: [id], map: "baseCurrency_currencyId_fkey")
  exchangeRates exchangeRates[]

  @@index([currencyId], map: "baseCurrency_currencyId_fkey")
}

model currency {
  id            String          @id @default(cuid())
  currencyName  String          @unique(map: "Currency_currencyName_key") @map("currency_name")
  updatedAt     DateTime        @default(now()) @map("updated_at")
  createdAt     DateTime        @default(now()) @map("created_at")
  baseCurrency  baseCurrency[]
  exchangeRates exchangeRates[]
  payments      Payment[]       @relation("currencyTopayments")
  tax           Tax[]
}

model disposals {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  priceId   String   @map("price_id")
  createdAt DateTime @default(now()) @map("created_at")
  prices    Prices   @relation("disposalsToprices", fields: [priceId], references: [id], map: "Disposals_priceId_fkey")
  products  Product  @relation("disposalsToproducts", fields: [productId], references: [id], map: "Disposals_productId_fkey")

  @@index([priceId], map: "Disposals_priceId_fkey")
  @@index([productId], map: "Disposals_productId_fkey")
}

model exchangeRates {
  id             String       @id @default(cuid())
  exchangeRate   Decimal      @map("exchange_rate") @db.Decimal(12, 2)
  currencyId     String       @map("currency_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  baseCurrencyId String       @map("base_currency_id")
  active         Boolean      @default(true)
  baseCurrency   baseCurrency @relation(fields: [baseCurrencyId], references: [id], map: "exchangeRates_baseCurrencyId_fkey", onDelete: Restrict)
  currency       currency     @relation(fields: [currencyId], references: [id], map: "exchangeRates_currencyId_fkey", onDelete: Restrict)
  payments       Payment[]    @relation("exchangeRatesTopayments")
  prices         Prices[]     @relation("exchangeRatesToprices")

  @@index([baseCurrencyId], map: "exchangeRates_baseCurrencyId_fkey")
  @@index([currencyId], map: "exchangeRates_currencyId_fkey")
}

model Journal {
  id            String      @id @default(cuid())
  recorder      User        @relation(fields: [recorderId], references: [id])
  recorderId    Int         @map("recepient_id")
  supplier      Supplier?   @relation(fields: [supplierId], references: [id])
  supplierId    String?     @map("supplier_id")
  customer      Customer?   @relation(fields: [customerId], references: [id])
  customerId    String?     @map("customer_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @map("transaction_id")
  narration     String
  amount        Decimal     @db.Decimal(12, 2)
}

model SalesJournal {
  id            String      @id @default(cuid())
  recorder      User        @relation(fields: [recorderId], references: [id])
  recorderId    Int         @map("recorder_id")
  supplier      Supplier    @relation(fields: [supplierId], references: [id])
  supplierId    String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  narration     String
  amount        Decimal     @db.Decimal(12, 2)
}

model PurchasesJournal {
  id            String      @id @default(cuid())
  recorder      User        @relation(fields: [recorderId], references: [id])
  recorderId    Int         @map("recorder_id")
  customer      Customer?   @relation(fields: [customerId], references: [id])
  customerId    String?     @map("customer_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @map("transaction_id")
  narration     String
  amount        Decimal     @db.Decimal(12, 2)
}

model CashDisbursementsJournal {
  id            String      @id @default(cuid())
  recorder      User        @relation(fields: [recorderId], references: [id])
  recorderId    Int         @map("recorder_id")
  supplier      Supplier?   @relation(fields: [supplierId], references: [id])
  supplierId    String?     @map("supplier_id")
  customer      Customer?   @relation(fields: [customerId], references: [id])
  customerId    String?     @map("customer_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @map("transaction_id")
  narration     String
  amount        Decimal     @db.Decimal(12, 2)
}

model CashReceiptsJournal {
  id            String      @id @default(cuid())
  recorder      User        @relation(fields: [recorderId], references: [id])
  recorderId    Int         @map("recorder_id")
  supplier      Supplier?   @relation(fields: [supplierId], references: [id])
  supplierId    String?     @map("supplier_id")
  customer      Customer?   @relation(fields: [customerId], references: [id])
  customerId    String?     @map("customer_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @map("transaction_id")
  narration     String
  amount        Decimal     @db.Decimal(12, 2)
}

model ReturnsInwardsJournal {
  id            String      @id @default(cuid())
  recorder      User        @relation(fields: [recorderId], references: [id])
  recorderId    Int         @map("recorder_id")
  customer      Customer    @relation(fields: [customerId], references: [id])
  customerId    String      @map("customer_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @map("transaction_id")
  narration     String
  amount        Decimal     @db.Decimal(12, 2)
}

model ReturnsOutwardsJournal {
  id            String      @id @default(cuid())
  recorder      User        @relation(fields: [recorderId], references: [id])
  recorderId    Int         @map("recorder_id")
  supplier      Supplier    @relation(fields: [supplierId], references: [id])
  supplierId    String      @map("supplier_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @map("transaction_id")
  narration     String
  amount        Decimal     @db.Decimal(12, 2)
}

enum TransactionType {
  PURCHASE
  SALES
}

enum TransactionStatusCodes {
  PENDING
  FAILED
  SUCCEEDED
}

enum MeasurementUnit {
  KILOGRAMS
  GRAMS
  LITRES
  MILLILITRES
}
